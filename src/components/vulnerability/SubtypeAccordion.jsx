import React, { useMemo } from 'react';
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Chip,
  List,
  ListItem,
  ListItemText,
  ToggleButtonGroup,
  ToggleButton,
  Box,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { calculateProgress } from '../../helpers/vulnerabilityCalculators';
import { scoreOptions } from '../../data/vulnerabilidadFormFields';

const SubtypeAccordion = ({ subtipo, scores, onScoreChange }) => {
  // Render Guard: If scores are not ready, don't render the component.
  if (!scores) {
    return null;
  }

  const { progress } = useMemo(
    () => calculateProgress(subtipo.enunciados, scores),
    [subtipo.enunciados, scores]
  );

  const getButtonStyles = (value) => ({
    '&.Mui-selected': {
      color: 'white',
      backgroundColor:
        value === 1 ? 'success.main' : value === 0 ? 'error.main' : 'grey.500',
      '&:hover': {
        backgroundColor:
          value === 1 ? 'success.dark' : value === 0 ? 'error.dark' : 'grey.700',
      },
    },
  });

  return (
    <Accordion
      defaultExpanded
      elevation={2}
      sx={{ mb: 1.5, borderRadius: '8px', '&:before': { display: 'none' } }}
    >
      <AccordionSummary expandIcon={<ExpandMoreIcon />}>
        <Typography sx={{ flexGrow: 1, fontWeight: 500 }}>
          {subtipo.nombre}
        </Typography>
        <Chip
          label={`${progress}%`}
          size="small"
          color={progress === 100 ? 'success' : 'default'}
        />
      </AccordionSummary>
      <AccordionDetails sx={{ backgroundColor: '#fafafa' }}>
        <List dense>
          {subtipo.enunciados.map((enunciado, index) => (
            <ListItem
              key={enunciado.id}
              divider={index < subtipo.enunciados.length - 1}
              sx={{
                display: 'flex',
                // Responsive layout: Column on mobile, Row on desktop
                flexDirection: { xs: 'column', md: 'row' },
                alignItems: { xs: 'stretch', md: 'center' },
                justifyContent: 'space-between',
                gap: { xs: 1, md: 2 },
                py: 1.5, 
              }}
            >
              {/* Text: Grows and has margin-bottom only on mobile */}
              <ListItemText
                primary={enunciado.texto}
                sx={{ flexGrow: 1, minWidth: 0, mb: { xs: 1.5, md: 0 } }}
              />
              {/* Buttons: Container takes full-width only on mobile */}
              <Box sx={{ flexShrink: 0, width: { xs: '100%', md: 'auto' } }}>
                <ToggleButtonGroup
                  value={scores[enunciado.id] ?? null}
                  exclusive
                  onChange={(_, newScore) => {
                    if (newScore !== null) {
                      onScoreChange(enunciado.id, newScore);
                    }
                  }}
                  size="small"
                  sx={{ width: '100%' }} // Group fills its container
                >
                  {scoreOptions.map((opt) => (
                    <ToggleButton
                      key={opt.value}
                      value={opt.value}
                      // Buttons grow to fill space on mobile
                      sx={{ ...getButtonStyles(opt.value), flexGrow: { xs: 1, md: 0 } }}
                    >
                      {opt.label}
                    </ToggleButton>
                  ))}
                </ToggleButtonGroup>
              </Box>
            </ListItem>
          ))}
        </List>
      </AccordionDetails>
    </Accordion>
  );
};

export default SubtypeAccordion;
