import { createSlice } from '@reduxjs/toolkit';

// The new state will hold the scores for each vulnerability statement.
// The key will be the statement's ID, and the value will be the score (0, 0.5, or 1).
const initialState = {
  scores: {}, // e.g., { 'p-go-1': 1, 'p-go-2': 0, ... }
  isLoading: false,
  error: null,
};

export const vulnerabilitySlice = createSlice({
  name: 'vulnerability',
  initialState,
  reducers: {
    /**
     * Sets or updates the score for a specific vulnerability statement.
     * The payload should be an object like { id: 'statement-id', score: 1 }.
     */
    setVulnerabilityScore: (state, action) => {
      const { id, score } = action.payload;
      if (id !== undefined && score !== undefined) {
        state.scores[id] = score;
      }
    },

    /**
     * Resets all scores back to the initial empty state.
     */
    resetScores: (state) => {
      state.scores = {};
    },

    // Reducers for loading and error states if needed in the future
    startLoading: (state) => {
      state.isLoading = true;
    },
    setError: (state, action) => {
      state.isLoading = false;
      state.error = action.payload;
    },
  },
});

// Export the new action creators
export const {
  setVulnerabilityScore,
  resetScores,
  startLoading,
  setError,
} = vulnerabilitySlice.actions;

// Export the reducer
export default vulnerabilitySlice.reducer;
